server:
  port: 8080
  servlet:
    context-path: /api

spring:
  datasource:
    url: ${POSTGRES_URL:jdbc:postgresql://localhost:5432/ticker_booking}
    username: ${POSTGRES_USERNAME:root}
    password: ${POSTGRES_PASSWORD:root}
  jpa:
    hibernate:
      ddl-auto: none
  flyway:
    enabled: true
    locations: classpath:db/migration

  cache:
    type: redis
  redis:
    url: ${REDIS_URL:redis://localhost:6379}

  rabbitmq:
    addresses: ${RABBIT_MQ_URL:amqp://guest:guest@localhost:5672}

  config:
    import: vault://
  cloud:
    vault:
      uri: ${VAULT_URL_PUBLIC:http://localhost:8200}
      authentication: TOKEN
      token: ${VAULT_TOKEN:root}
      namespace: admin
      kv:
        backend: secret
        default-context: application

  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://localhost:9080/realms/ticket-booking



management:
  endpoints:
    web:
      exposure:
        include: health, info, metrics, prometheus
  endpoint:
    prometheus:
      enabled: true

app:
  time:
    expiryTime: 3600

key:
  jwt:
    value: ${vault.key.jwt}

custom-cache:
  default-ttl: 300
  ttls:
    eventDetail: 1800
    userProfile: 3600
    dashboardStats: 10

vnp:
  expire: 60
  payUrl: https://sandbox.vnpayment.vn/paymentv2/vpcpay.html
  returnUrl: http://localhost:8080/api/payments/vnpay/return
  tmnCode: ${vault.code.vnp}
  secretKey: ${vault.key.vnp}
  feBackUrl: http://localhost:8888/home

keycloak:
  auth-server-url: http://localhost:9080/
  realm: ticket-booking
  resource: booking-app
  credentials:
    id: spring-boot-app
    secret: ${vault.server.keycloak}
  bearer-only: true
  ssl-required: external
  public-client: false
  use-resource-role-mappings: true
